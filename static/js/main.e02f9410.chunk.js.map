{"version":3,"sources":["components/navigationItem/NavigationItem.js","components/navigationBar/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["NavigationItem","label","section","className","handleClick","spanRef","useRef","href","onClick","current","ref","NavigationBar","props","setSlidePosition","slideBar","setState","slidePosition","left","offsetLeft","width","offsetWidth","span","selectedItem","selectedCity","handleResize","state","resizing","enableTransition","getMenuClass","timer","debounce","window","addEventListener","this","removeEventListener","navigationData","resizeClass","map","key","Component","SlideBar","style","App","cities","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWA0BeA,G,MArBQ,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAC7CC,EAAUC,iBAAO,MAEvB,OACE,wBAAIH,UAAU,mBACZ,uBACEI,KAAI,WAAML,GACVC,UAAWA,EACXK,QAAS,kBAAMJ,EAAYC,EAAQI,QAASP,KAE5C,0BAAMQ,IAAKL,GAAUJ,OCRvBU,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA0BRC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CACZC,cAAe,CACbC,KAAMH,EAASI,WACfC,MAAOL,EAASM,gBA/BH,EAoCnBhB,YAAc,SAACiB,EAAMnB,GACnB,EAAKW,iBAAiBQ,GACtB,EAAKN,SAAS,CACZO,aAAcD,EACdE,aAAcrB,KAxCC,EA4CnBsB,aAAe,WACR,EAAKC,MAAMC,UACd,EAAKX,SAAS,CACZW,UAAU,IAGd,IAAMZ,EAAW,EAAKW,MAAMH,aAC5BR,GAAY,EAAKD,iBAAiBC,GAClC,EAAKa,oBApDY,EAuDnBC,aAAe,SAAC1B,GAEd,OADyB,EAAKuB,MAAtBF,eACgBrB,EAAU,WAAa,IAvD/C,EAAK2B,MAAQ,KACb,EAAKJ,MAAQ,CACXT,cAAe,CACbC,KAAM,EACNE,MAAO,GAETG,aAAc,KACdC,aAAc,GACdG,UAAU,GAEZ,EAAKC,iBAAmBG,KAAS,WAC/B,EAAKf,SAAS,CACZW,UAAU,MAEX,KAhBc,E,gEAoBjBK,OAAOC,iBAAiB,SAAUC,KAAKT,gB,6CAIvCO,OAAOG,oBAAoB,SAAUD,KAAKT,gB,+BAoClC,IAAD,OACCW,EAAmBF,KAAKrB,MAAxBuB,eACFC,EAAcH,KAAKR,MAAMC,SAAW,WAAa,GACvD,OACES,GACE,yBAAKhC,UAAU,cACb,wBAAIA,UAAS,wBACVgC,EAAeE,KAAI,gBAAGpC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OAClB,kBAAC,EAAD,CACED,MAAOA,EACPqC,IAAKpC,EACLA,QAASA,EACTC,UAAW,EAAKyB,aAAa1B,GAC7BE,YAAa,EAAKA,kBAIxB,kBAAC,EAAD,CACED,UAAWiC,EACXpB,cAAeiB,KAAKR,MAAMT,qB,GAhFVuB,cA4FtBC,EAAW,SAAC,GAAD,IAAGxB,EAAH,EAAGA,cAAeb,EAAlB,EAAkBA,UAAlB,OACf,yBAAKA,UAAU,kCACb,0BACEA,UAAS,+BAA0BA,GACnCsC,MAAOzB,MAKEL,I,OC7FA+B,MAVf,WACE,OACE,yBAAKvC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAegC,eAAgBA,EAAeQ,YCGlCC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e02f9410.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./NavigationItem.css\";\n\nconst NavigationItem = ({ label, section, className, handleClick }) => {\n  const spanRef = useRef(null);\n\n  return (\n    <li className=\"App-navbar-item\">\n      <a\n        href={`#${section}`}\n        className={className}\n        onClick={() => handleClick(spanRef.current, section)}\n      >\n        <span ref={spanRef}>{label}</span>\n      </a>\n    </li>\n  );\n};\n\nNavigationItem.propTypes = {\n  section: PropTypes.string.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default NavigationItem;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport debounce from \"lodash/debounce\";\nimport NavigationItem from \"../navigationItem/NavigationItem\";\n\nimport \"./NavigationBar.css\";\n\nclass NavigationBar extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n    this.state = {\n      slidePosition: {\n        left: 0,\n        width: 0,\n      },\n      selectedItem: null,\n      selectedCity: \"\",\n      resizing: false,\n    };\n    this.enableTransition = debounce(() => {\n      this.setState({\n        resizing: false,\n      });\n    }, 200);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.handleResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n\n  setSlidePosition = (slideBar) => {\n    this.setState({\n      slidePosition: {\n        left: slideBar.offsetLeft,\n        width: slideBar.offsetWidth,\n      },\n    });\n  };\n\n  handleClick = (span, section) => {\n    this.setSlidePosition(span);\n    this.setState({\n      selectedItem: span,\n      selectedCity: section,\n    });\n  };\n\n  handleResize = () => {\n    if (!this.state.resizing) {\n      this.setState({\n        resizing: true,\n      });\n    }\n    const slideBar = this.state.selectedItem;\n    slideBar && this.setSlidePosition(slideBar);\n    this.enableTransition();\n  };\n\n  getMenuClass = (section) => {\n    const { selectedCity } = this.state;\n    return selectedCity === section ? \"selected\" : \"\";\n  };\n\n  render() {\n    const { navigationData } = this.props;\n    const resizeClass = this.state.resizing ? \"resizing\" : \"\";\n    return (\n      navigationData && (\n        <nav className=\"App-navbar\">\n          <ul className={`App-navbar-container`}>\n            {navigationData.map(({ label, section }) => (\n              <NavigationItem\n                label={label}\n                key={section}\n                section={section}\n                className={this.getMenuClass(section)}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </ul>\n          <SlideBar\n            className={resizeClass}\n            slidePosition={this.state.slidePosition}\n          />\n        </nav>\n      )\n    );\n  }\n}\n\nNavigationBar.propTypes = {\n  navigationData: PropTypes.array.isRequired,\n};\n\nconst SlideBar = ({ slidePosition, className }) => (\n  <div className=\"App-navbar-underline-container\">\n    <span\n      className={`App-navbar-underline ${className}`}\n      style={slidePosition}\n    ></span>\n  </div>\n);\n\nexport default NavigationBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavigationBar from \"./components/navigationBar/NavigationBar\";\nimport navigationData from \"./utils/navigation.json\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavigationBar navigationData={navigationData.cities} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}