{"version":3,"sources":["components/navigationItem/NavigationItem.js","components/navigationBar/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["NavigationItem","label","section","className","handleClick","spanRef","useRef","href","onClick","current","ref","NavigationBar","props","setSlidePosition","slideBar","setState","slidePosition","left","offsetLeft","width","offsetWidth","span","selectedItem","selectedCity","handleResize","state","resizing","enableTransition","getMenuClass","timer","debounce","window","addEventListener","this","removeEventListener","navigationData","resizeClass","map","city","key","Component","SlideBar","style","App","cities","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAsBeA,G,MAjBQ,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAE1CC,EAAUC,iBAAO,MAEvB,OACI,wBAAIH,UAAU,mBACV,uBAAGI,KAAI,WAAML,GAAWC,UAAWA,EAAWK,QAAS,kBAAMJ,EAAYC,EAAQI,QAASP,KAAU,0BAAMQ,IAAKL,GAAUJ,OCJ/HU,G,wDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0BVC,iBAAmB,SAACC,GAChB,EAAKC,SAAS,CACVC,cAAe,CACXC,KAAMH,EAASI,WACfC,MAAOL,EAASM,gBA/BT,EAoCnBhB,YAAc,SAACiB,EAAMnB,GACjB,EAAKW,iBAAiBQ,GACtB,EAAKN,SAAS,CACVO,aAAcD,EACdE,aAAcrB,KAxCH,EA4CnBsB,aAAe,WACN,EAAKC,MAAMC,UACZ,EAAKX,SAAS,CACVW,UAAU,IAGlB,IAAMZ,EAAW,EAAKW,MAAMH,aAC5BR,GAAY,EAAKD,iBAAkBC,GACnC,EAAKa,oBApDU,EAuDnBC,aAAe,YAAkB,IAAf1B,EAAc,EAAdA,QACd,OAAO,EAAKuB,MAAMF,eAAiBrB,EAAU,WAAa,IAtD1D,EAAK2B,MAAQ,KACb,EAAKJ,MAAQ,CACTT,cAAe,CACXC,KAAM,EACNE,MAAO,GAEXG,aAAc,KACdC,aAAc,GACdG,UAAU,GAEd,EAAKC,iBAAmBG,KAAU,WAC9B,EAAKf,SAAS,CACVW,UAAU,MAEf,KAhBY,E,gEAoBfK,OAAOC,iBAAiB,SAAUC,KAAKT,gB,6CAIvCO,OAAOG,oBAAoB,SAAUD,KAAKT,gB,+BAmCpC,IAAD,OACGW,EAAmBF,KAAKrB,MAAxBuB,eACFC,EAAcH,KAAKR,MAAMC,SAAW,WAAa,GACvD,OAAOS,GACH,yBAAKhC,UAAU,cACX,wBAAIA,UAAS,wBACRgC,EAAeE,KAAI,SAAAC,GAAI,OACpB,kBAAC,EAAD,CACIrC,MAAOqC,EAAKrC,MACZsC,IAAKD,EAAKpC,QACVA,QAASoC,EAAKpC,QACdC,UAAW,EAAKyB,aAAaU,GAC7BlC,YAAa,EAAKA,kBAI9B,kBAAC,EAAD,CAAUD,UAAWiC,EAAapB,cAAeiB,KAAKR,MAAMT,qB,GA7EhDwB,cAuFtBC,EAAW,SAAC,GAAD,IAAEzB,EAAF,EAAEA,cAAeb,EAAjB,EAAiBA,UAAjB,OACb,yBAAKA,UAAU,kCACX,0BAAMA,UAAS,+BAA0BA,GAAauC,MAAO1B,MAItDL,I,OCrFAgC,MAVf,WACE,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAegC,eAAiBA,EAAeS,YCGnCC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9de731eb.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NavigationItem.css'\n\nconst NavigationItem = ({label, section, className, handleClick}) => {\n\n    const spanRef = useRef(null);\n  \n    return(\n        <li className='App-navbar-item'>\n            <a href={`#${section}`} className={className} onClick={() => handleClick(spanRef.current, section)}><span ref={spanRef}>{label}</span></a>\n        </li>\n    )\n\n}\n\nNavigationItem.propTypes = {\n    section: PropTypes.string.isRequired,\n    handleClick: PropTypes.func.isRequired\n}\n\nexport default NavigationItem;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce  from 'lodash/debounce';\nimport NavigationItem from '../navigationItem/NavigationItem'\n\nimport './NavigationBar.css'\n\nclass NavigationBar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.timer = null;\n        this.state = {\n            slidePosition: {\n                left: 0,\n                width: 0\n            },\n            selectedItem: null,\n            selectedCity: '',\n            resizing: false\n        };\n        this.enableTransition = debounce( ()=> {\n            this.setState({\n                resizing: false\n            })\n        }, 200 )\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n    }\n\n    setSlidePosition = (slideBar) => {\n        this.setState({\n            slidePosition: {\n                left: slideBar.offsetLeft,\n                width: slideBar.offsetWidth\n            }\n        })\n    }\n\n    handleClick = (span, section) => {\n        this.setSlidePosition(span);\n        this.setState({\n            selectedItem: span,\n            selectedCity: section\n        })\n    }\n\n    handleResize = () => {\n        if( !this.state.resizing ) {\n            this.setState({\n                resizing: true\n            })\n        }\n        const slideBar = this.state.selectedItem;\n        slideBar && this.setSlidePosition( slideBar )\n        this.enableTransition();\n    }\n\n    getMenuClass = ({ section }) => {\n        return this.state.selectedCity === section ? 'selected' : ''; \n    }\n\n    render() {\n        const { navigationData } = this.props;\n        const resizeClass = this.state.resizing ? 'resizing' : '';\n        return navigationData && (\n            <nav className=\"App-navbar\">\n                <ul className={`App-navbar-container`}>\n                    {navigationData.map(city => ( \n                        <NavigationItem \n                            label={city.label}\n                            key={city.section}\n                            section={city.section}\n                            className={this.getMenuClass(city)}\n                            handleClick={this.handleClick}\n                        /> \n                        ))}\n                </ul>\n                <SlideBar className={resizeClass} slidePosition={this.state.slidePosition} />\n            </nav>\n        )\n    }\n}\n\nNavigationBar.propTypes = {\n    navigationData: PropTypes.array.isRequired\n}\n\nconst SlideBar = ({slidePosition, className}) => (\n    <div className=\"App-navbar-underline-container\">\n        <span className={`App-navbar-underline ${className}`} style={slidePosition}></span>\n    </div>\n)\n\nexport default NavigationBar;","import React from 'react';\nimport './App.css';\nimport NavigationBar from './components/navigationBar/NavigationBar';\nimport navigationData from './utils/navigation.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavigationBar navigationData={ navigationData.cities } />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}